/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.30.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { Decimal, InstantiateMsg, Config, ExecuteMsg, QueryMsg, QueryBoundForString, QueryOptionsForString, NullableRoyaltyDefault, Addr, Timestamp, Uint64, RoyaltyDefault, RoyaltyEntry, NullableRoyaltyProtocol, RoyaltyProtocol, RoyaltyPaymentResponse, ArrayOfRoyaltyProtocol } from "./RoyaltyRegistry.types";
export interface RoyaltyRegistryMessage {
  contractAddress: string;
  sender: string;
  initializeCollectionRoyalty: ({
    collection
  }: {
    collection: string;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  setCollectionRoyaltyDefault: ({
    collection,
    recipient,
    share
  }: {
    collection: string;
    recipient: string;
    share: Decimal;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateCollectionRoyaltyDefault: ({
    collection,
    decrement,
    recipient,
    shareDelta
  }: {
    collection: string;
    decrement?: boolean;
    recipient?: string;
    shareDelta?: Decimal;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  setCollectionRoyaltyProtocol: ({
    collection,
    protocol,
    recipient,
    share
  }: {
    collection: string;
    protocol: string;
    recipient: string;
    share: Decimal;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
  updateCollectionRoyaltyProtocol: ({
    collection,
    decrement,
    protocol,
    recipient,
    shareDelta
  }: {
    collection: string;
    decrement?: boolean;
    protocol: string;
    recipient?: string;
    shareDelta?: Decimal;
  }, _funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class RoyaltyRegistryMessageComposer implements RoyaltyRegistryMessage {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.initializeCollectionRoyalty = this.initializeCollectionRoyalty.bind(this);
    this.setCollectionRoyaltyDefault = this.setCollectionRoyaltyDefault.bind(this);
    this.updateCollectionRoyaltyDefault = this.updateCollectionRoyaltyDefault.bind(this);
    this.setCollectionRoyaltyProtocol = this.setCollectionRoyaltyProtocol.bind(this);
    this.updateCollectionRoyaltyProtocol = this.updateCollectionRoyaltyProtocol.bind(this);
  }

  initializeCollectionRoyalty = ({
    collection
  }: {
    collection: string;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          initialize_collection_royalty: {
            collection
          }
        })),
        funds: _funds
      })
    };
  };
  setCollectionRoyaltyDefault = ({
    collection,
    recipient,
    share
  }: {
    collection: string;
    recipient: string;
    share: Decimal;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          set_collection_royalty_default: {
            collection,
            recipient,
            share
          }
        })),
        funds: _funds
      })
    };
  };
  updateCollectionRoyaltyDefault = ({
    collection,
    decrement,
    recipient,
    shareDelta
  }: {
    collection: string;
    decrement?: boolean;
    recipient?: string;
    shareDelta?: Decimal;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_collection_royalty_default: {
            collection,
            decrement,
            recipient,
            share_delta: shareDelta
          }
        })),
        funds: _funds
      })
    };
  };
  setCollectionRoyaltyProtocol = ({
    collection,
    protocol,
    recipient,
    share
  }: {
    collection: string;
    protocol: string;
    recipient: string;
    share: Decimal;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          set_collection_royalty_protocol: {
            collection,
            protocol,
            recipient,
            share
          }
        })),
        funds: _funds
      })
    };
  };
  updateCollectionRoyaltyProtocol = ({
    collection,
    decrement,
    protocol,
    recipient,
    shareDelta
  }: {
    collection: string;
    decrement?: boolean;
    protocol: string;
    recipient?: string;
    shareDelta?: Decimal;
  }, _funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          update_collection_royalty_protocol: {
            collection,
            decrement,
            protocol,
            recipient,
            share_delta: shareDelta
          }
        })),
        funds: _funds
      })
    };
  };
}